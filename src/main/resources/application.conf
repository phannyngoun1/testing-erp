include classpath("reference.conf")
include classpath("database.conf")
include classpath("akka-persistence-jdbc.conf")

passivate-timeout = 5 seconds

erp {
  api-server {
    host = "127.0.0.1"
    port = "7000"
    port = ${?HTTP_PORT}
  }

}

akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = cluster

    serializers {
      #inventory-event-serializer = "net.dream.erp.serialization.inventory.InventoryEventJSONSerializer"
      json = "net.dream.erp.interfaces.serialization.InventoryJSONSerializer"
    }
    serialization-bindings {

      "net.dream.erp.interfaces.service.inventory.InventoryService$Protocol$AddNewPartRequest" = json

      "net.dream.erp.domain.inventory.InventoryEvent$AddNewPartEvent" = json
      "net.dream.erp.domain.inventory.InventoryEvent$InventoryInitialEvent" = json

      "net.dream.erp.domain.inventory.UoM" = json
      "net.dream.erp.domain.uom.UoMState" = json
      "net.dream.erp.interfaces.service.setting.IdsState" = json
      "net.dream.erp.interfaces.service.setting.IdGeneration$GetNextIdRequest" = json

      #"net.dream.erp.domains.inventory.InventoryEventReceived" = inventory-event-serializer
      #"net.dream.erp.domains.inventory.InventoryEventUpdated" = inventory-event-serializer
    }

  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }

  http {
    server = {
      request-timeout = 60s
    }
  }

  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551",
      "akka://ClusterSystem@127.0.0.1:2552",
      "akka://ClusterSystem@127.0.0.1:2553"
    ],


    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    auto-down-unreachable-after = 10s
  }

  extensions=[
    "akka.cluster.metrics.ClusterMetricsExtension",
    "akka.persistence.Persistence"
  ]


  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
   }
  }
}

# Enable metrics extension in akka-cluster-metrics.
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native




